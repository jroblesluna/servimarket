Archivo /src/screens/PrivateZone/PrivateZone.js:
import React, {useEffect, useState} from 'react';
import {useNavigation} from '@react-navigation/native';
import auth from '@react-native-firebase/auth';
import {GoogleSignin} from '@react-native-google-signin/google-signin';
import PrivateZoneDrawer from '../../components/PrivateZoneDrawer';
import ServiMarket from './ServiMarket';

function PrivateZone() {
  const navigation = useNavigation();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged(currentUser => {
      setUser(currentUser);
    });

    return unsubscribe;
  }, []);

  const handleSignOut = async () => {
    try {
      console.log(user);
      if (user != null) {
        console.log('Auth Signing Out');
        await auth().signOut();
      }
      const isGoogleSignedIn = await GoogleSignin.isSignedIn();
      console.log('isGoogleSignedIn:', isGoogleSignedIn);
      if (isGoogleSignedIn) {
        console.log('Google Signing Out');
        await GoogleSignin.revokeAccess();
        console.log('Access Revoked');
      }
    } catch (error) {
      console.log('Error en Sign Out: ', error);
    } finally {
      console.log('Nav Reset');
      navigation.reset({
        index: 0,
        routes: [{name: 'Login'}],
      });
    }
  };

  return (
    <PrivateZoneDrawer
      handleSignOut={handleSignOut}
      user={user}
      navigation={navigation}>
      <ServiMarket />
    </PrivateZoneDrawer>
  );
}

export default PrivateZone;
Archivo /src/components/PrivateZoneDrawer.js:
import React from 'react';
import {createDrawerNavigator} from '@react-navigation/drawer';
import {DrawerContentScrollView, DrawerItem} from '@react-navigation/drawer';
import {View, Image, StyleSheet, TouchableOpacity} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import ServiMarket from '../screens/PrivateZone/ServiMarket';
import MyProfile from '../screens/PrivateZone/MyProfile';
import MyServices from '../screens/PrivateZone/MyServices';
import MyAppointments from '../screens/PrivateZone/MyAppointments';
import ViewHistory from '../screens/PrivateZone/ViewHistory';
import MyWallet from '../screens/PrivateZone/MyWallet';
import MySettings from '../screens/PrivateZone/MySettings';
import {useNavigation} from '@react-navigation/native';
import {DrawerActions} from '@react-navigation/routers';

const CustomDrawerContent = ({handleSignOut, user, navigation}) => {
  const closeDrawer = () => {
    navigation.dispatch(DrawerActions.closeDrawer());
  };

  return (
    <DrawerContentScrollView style={styles.drawerContentScrollViewStyle}>
      <DrawerItem
        style={styles.drawerItemStyle}
        label=""
        icon={({focused, color, size}) => (
          <View style={styles.drawerCloseIconContainer}>
            <TouchableOpacity onPress={closeDrawer}>
              <Icon
                name="close"
                size={size}
                color={color}
                style={styles.drawerCloseIcon}
              />
            </TouchableOpacity>
          </View>
        )}
      />

      <View style={styles.headerContainer}>
        {user && user.photoURL && (
          <Image source={{uri: user.photoURL}} style={styles.headerImage} />
        )}
      </View>
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Profile"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyProfile')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="ServiMarket"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('ServiMarket')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Services"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyServices')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Appointments"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyAppointments')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="View History"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('ViewHistory')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Wallet"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyWallet')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Settings"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MySettings')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="Sign Out"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={handleSignOut}
      />
    </DrawerContentScrollView>
  );
};

const HeaderRight = () => {
  const navigation = useNavigation();

  const handleOpenDrawer = () => {
    navigation.openDrawer();
  };

  return (
    <TouchableOpacity onPress={handleOpenDrawer}>
      <Icon name="menu" size={24} color="white" style={{marginRight: 15}} />
    </TouchableOpacity>
  );
};

function PrivateZoneDrawer({handleSignOut, user, navigation}) {
  const Drawer = createDrawerNavigator();

  return (
    <Drawer.Navigator
      initialRouteName="ServiMarket" // Modificar esta línea
      screenOptions={{
        drawerType: 'front',
        drawerPosition: 'right',
        headerStyle: styles.drawerHeaderStyle, // Aplica el estilo al título del Drawer
        headerTitleStyle: styles.drawerHeaderTitleStyle, // Aplica el estilo al título del Drawer
        drawerStyle: {
          width: '55%',
        },
        headerLeft: () => null, // Elimina el icono de hamburguesa del lado izquierdo
        headerRight: () => <HeaderRight navigation={navigation} />,
        headerTitleAlign: 'center', // Centra el título en la barra de navegación
      }}
      drawerContent={() => (
        <CustomDrawerContent
          handleSignOut={handleSignOut}
          user={user}
          navigation={navigation}
        />
      )}>
      <Drawer.Screen name="MyProfile" component={MyProfile} />
      <Drawer.Screen name="ServiMarket" component={ServiMarket} />
      <Drawer.Screen name="MyServices" component={MyServices} />
      <Drawer.Screen name="MyAppointments" component={MyAppointments} />
      <Drawer.Screen name="ViewHistory" component={ViewHistory} />
      <Drawer.Screen name="MyWallet" component={MyWallet} />
      <Drawer.Screen name="MySettings" component={MySettings} />
    </Drawer.Navigator>
  );
}

const styles = StyleSheet.create({
  drawerContentScrollViewStyle: {
    backgroundColor: '#1E3264',
    //paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : undefined,
    paddingLeft: 0,
    paddingRight: 0,
  },
  headerContainer: {
    height: 150,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerImage: {
    width: 100,
    height: 100,
    resizeMode: 'contain',
    borderRadius: 75,
  },
  drawerHeaderStyle: {
    backgroundColor: '#1E3264',
  },
  drawerHeaderTitleStyle: {
    color: 'white',
  },
  drawerItemStyle: {
    marginLeft: 0,
    marginRight: 0,
    //backgroundColor: 'green',
    paddingLeft: 5,
  },
  drawerItemLabelStyle: {
    color: 'white',
    //fontFamily: 'Comic Sans',
    fontSize: 20,
    fontWeight: 'bold',
    //backgroundColor: 'pink',
  },
  drawerCloseIconContainer: {
    minWidth: '90%',
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    //alignItems: 'center',
  },
  drawerCloseIcon: {
    color: 'white',
  },
});

export default PrivateZoneDrawer;
Archivo /src/screens/PrivateZone/MyAppointments.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyAppointments = () => {
  return (
    <View>
      <Text>MyAppointments</Text>
    </View>
  );
};

export default MyAppointments;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MyProfile.js:
import React, {useState, useEffect, useRef} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  Alert,
  Image,
  ScrollView,
} from 'react-native';
import firestore from '@react-native-firebase/firestore';
import auth from '@react-native-firebase/auth';
import CustomImage from '../../components/CustomImage';
import {useTranslation} from 'react-i18next';
import PhoneInput from 'react-native-phone-number-input';
import Navigation from '../../components/Navigation';

function MyProfile() {
  const {t} = useTranslation();
  const [currentUser, setCurrentUser] = useState(null);
  const [displayName, setDisplayName] = useState('');
  const [given_name, setGivenName] = useState('');
  const [family_name, setFamilyName] = useState('');
  const [photoURL, setPhotoURL] = useState('');
  const [phoneCountry, setPhoneCountry] = useState('');
  const [phoneCallingCode, setPhoneCallingCode] = useState([]);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [address, setAddress] = useState('');
  const [city, setCity] = useState('');
  const [province, setProvince] = useState('');
  const [country, setCountry] = useState('');
  const [zipcode, setZipcode] = useState('');
  const [about, setAbout] = useState('');

  const phoneInputRef = useRef(null);

  useEffect(() => {
    const user = auth().currentUser;
    if (user) {
      const userRef = firestore().collection('users').doc(user.email);
      userRef.get().then(doc => {
        if (doc.exists) {
          const userData = doc.data();
          setCurrentUser(userData);
          setDisplayName(userData.displayName);
          setGivenName(userData.given_name);
          setFamilyName(userData.family_name);
          setPhotoURL(userData.photoURL);
          setPhoneCountry(userData.phoneCountry);
          setPhoneCallingCode(userData.phoneCallingCode);
          setPhoneNumber(userData.phoneNumber);
          setAddress(userData.address);
          setCity(userData.city);
          setProvince(userData.province);
          setCountry(userData.country);
          setZipcode(userData.zipcode);
          setAbout(userData.about);
        }
      });
    }
  }, []);

  useEffect(() => {
    if (phoneInputRef.current && phoneNumber) {
      phoneInputRef.current.onSelect({
        cca2: phoneCountry,
        callingCode: phoneCallingCode,
      });
      phoneInputRef.current.onChangeText(phoneNumber);
    }
  }, [phoneCallingCode, phoneCountry, phoneNumber]);

  const handleSaveChanges = async () => {
    const user = auth().currentUser;
    if (user) {
      const userRef = firestore().collection('users').doc(user.email);
      try {
        await userRef.update({
          displayName,
          given_name,
          family_name,
          photoURL,
          phoneCountry,
          phoneCallingCode,
          phoneNumber,
          address,
          city,
          province,
          country,
          zipcode,
          about,
        });
        Alert.alert('Éxito', 'Cambios guardados exitosamente');
      } catch (error) {
        Alert.alert('Error', 'No se pudieron guardar los cambios');
      }
    }
  };

  const handleOnChangeText = text => {
    setPhoneNumber(text);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {currentUser && (
        <>
          {photoURL ? (
            <Image source={{uri: photoURL}} style={styles.headerImage} />
          ) : (
            <CustomImage
              imageName="logo"
              width={100}
              height={100}
              borderRadius={50}
            />
          )}

          <View>
            <Text style={styles.fieldText}>{t('email')}</Text>
            <TextInput
              style={styles.input}
              placeholder={t('email')}
              value={auth().currentUser.email}
              editable={false}
            />
            <Text style={styles.fieldText}>Display Name</Text>
            <TextInput
              style={styles.input}
              placeholder="Nombre Completo"
              value={displayName}
              onChangeText={text => setDisplayName(text)}
            />
            <Text style={styles.fieldText}>Given Name</Text>
            <TextInput
              style={styles.input}
              placeholder="Nombre"
              value={given_name}
              onChangeText={text => setGivenName(text)}
            />
            <Text style={styles.fieldText}>Family Name</Text>
            <TextInput
              style={styles.input}
              placeholder="Apellido"
              value={family_name}
              onChangeText={text => setFamilyName(text)}
            />
            <Text style={styles.fieldText}>Phone Number</Text>

            <View style={styles.phoneInputContainer}>
              <PhoneInput
                ref={phoneInputRef}
                defaultCode={phoneCountry}
                countryCode={phoneCountry}
                defaultValue={phoneNumber}
                //value={phoneNumber}
                containerStyle={{
                  height: 45,
                  backgroundColor: 'transparent',
                  alignContent: 'center',
                }}
                textInputStyle={{height: 45}}
                codeTextStyle={{height: 45, paddingVertical: 12}}
                textContainerStyle={{backgroundColor: 'transparent'}}
                onChangeText={text => handleOnChangeText(text)}
              />
            </View>
            <Text style={styles.fieldText}>Address</Text>
            <TextInput
              style={styles.input}
              placeholder="Address"
              value={address}
              onChangeText={text => setAddress(text)}
            />
            <Text style={styles.fieldText}>City</Text>
            <TextInput
              style={styles.input}
              placeholder="City"
              value={city}
              onChangeText={text => setCity(text)}
            />
            <Text style={styles.fieldText}>Province</Text>
            <TextInput
              style={styles.input}
              placeholder="Province"
              value={province}
              onChangeText={text => setProvince(text)}
            />
            <Text style={styles.fieldText}>Country</Text>
            <TextInput
              style={styles.input}
              placeholder="Country"
              value={country}
              onChangeText={text => setCountry(text)}
            />
            <Text style={styles.fieldText}>Zipcode</Text>
            <TextInput
              style={styles.input}
              placeholder="Zipcode"
              value={zipcode}
              onChangeText={text => setZipcode(text)}
            />
            <Text style={styles.fieldText}>About</Text>
            <TextInput
              style={styles.input}
              placeholder="About"
              value={about}
              onChangeText={text => setAbout(text)}
              multiline={true}
              numberOfLines={3}
            />
          </View>

          <TouchableOpacity
            style={styles.saveButton}
            onPress={handleSaveChanges}>
            <Text style={styles.saveButtonText}>Guardar Cambios</Text>
          </TouchableOpacity>
        </>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  headerImage: {
    width: 100,
    height: 100,
    resizeMode: 'contain',
    borderRadius: 75,
  },
  container: {
    flexGrow: 1, // This ensures the content can grow and allows scrolling
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 10,
  },
  input: {
    minWidth: '90%',
    height: 45,
    borderColor: 'gray',
    borderWidth: 1,
    marginVertical: 5,
    paddingHorizontal: 10,
    fontSize: 16,
  },
  disabledInput: {
    backgroundColor: '#ddd',
  },
  saveButton: {
    width: 150,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
    marginTop: 10,
    backgroundColor: '#1363DF',
  },
  saveButtonText: {
    fontSize: 15,
    fontWeight: 'bold',
    color: 'white',
  },
  fieldText: {
    textAlign: 'left', // Align the text to the left
    fontSize: 16, // Adjust the font size if needed
    fontWeight: 'bold', // Add bold font weight if desired
    color: 'gray', // Adjust the text color if needed
    width: '100%', // Set the width to 100% to ensure the label spans the full width
  },
  phoneInputContainer: {
    borderWidth: 1,
    borderColor: 'gray',
    paddingHorizontal: 10,
  },
  phoneInput: {
    fontSize: 16,
    height: 40,
  },
});

export default MyProfile;
Archivo /src/screens/PrivateZone/MyServices.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyServices = () => {
  return (
    <View>
      <Text>MyServices</Text>
    </View>
  );
};

export default MyServices;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MySettings.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MySettings = () => {
  return (
    <View>
      <Text>MySettings</Text>
    </View>
  );
};

export default MySettings;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MyWallet.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyWallet = () => {
  return (
    <View>
      <Text>MyWallet</Text>
    </View>
  );
};

export default MyWallet;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/ServiMarket.js:
import {
  FlatList,
  Image,
  SafeAreaView,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import React, {useEffect, useState} from 'react';
import firestore from '@react-native-firebase/firestore';
import algoliasearch from 'algoliasearch/lite';
import {InstantSearch} from 'react-instantsearch-native';
import SearchBox from '../../components/SearchBox';
import PropTypes from 'prop-types';
import {connectInfiniteHits} from 'react-instantsearch-native';
import {connectHighlight} from 'react-instantsearch-native';

const ServiMarket = () => {
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesSnapshot = await firestore()
          .collection('serviceCategories')
          .get();
        const categoriesData = categoriesSnapshot.docs.map(doc => doc.data());
        setCategories(categoriesData);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  const algoliaClient = algoliasearch(
    process.env.ALGOLIA_APP_ID,
    process.env.ALGOLIA_API_KEY,
  );

  const preInfiniteHits = ({hits, hasMore, refineNext}) => {
    //console.log(hits);
    return (
      <FlatList
        data={hits}
        keyExtractor={item => item.objectID}
        ItemSeparatorComponent={() => <View style={styles.separator} />}
        onEndReached={() => hasMore && refineNext()}
        renderItem={renderServiceItem}
        //numColumns={2}
      />
    );
  };

  preInfiniteHits.propTypes = {
    hits: PropTypes.arrayOf(PropTypes.object).isRequired,
    hasMore: PropTypes.bool.isRequired,
    refineNext: PropTypes.func.isRequired,
  };

  const InfiniteHits = connectInfiniteHits(preInfiniteHits);

  const preHighlight = ({attribute, hit, highlight}) => {
    const highlights = highlight({
      highlightProperty: '_highlightResult',
      attribute,
      hit,
    });

    return (
      <Text>
        {highlights.map(({value, isHighlighted}, index) => {
          const style = {
            color: isHighlighted ? 'black' : 'white',
            backgroundColor: isHighlighted ? 'yellow' : 'transparent',
          };
          return (
            <Text key={index} style={style}>
              {value}
            </Text>
          );
        })}
      </Text>
    );
  };

  preHighlight.propTypes = {
    attribute: PropTypes.string.isRequired,
    hit: PropTypes.object.isRequired,
    highlight: PropTypes.func.isRequired,
  };

  const Highlight = connectHighlight(preHighlight);

  const renderServiceItem = ({item}) => {
    const parsedServiceCategoryId = parseInt(
      item.serviceCategory.split('/')[1],
      10,
    );
    const serviceCategory = categories.find(
      category => category.serviceCategoryId === parsedServiceCategoryId,
    );

    if (!serviceCategory) {
      return (
        <View style={styles.serviceItemContainer}>
          <Image source={{uri: item.imageUrl}} style={styles.serviceImage} />
          <View style={styles.overlay} />
          <View style={styles.serviceTextContainer}>
            <Text style={styles.serviceText}>Service Name...</Text>
            <Text style={styles.serviceText}>Nombre de Servicio...</Text>
          </View>
          {item.serviceCategory && (
            <View style={styles.categoryTextContainer}>
              <Text style={styles.categoryText}>Category...</Text>
              <Text style={styles.categoryText}>Categoría</Text>
            </View>
          )}
        </View>
      );
    } else {
      return (
        <View style={styles.serviceItemContainer}>
          <Image source={{uri: item.imageUrl}} style={styles.serviceImage} />
          <View style={styles.overlay} />
          <View style={styles.serviceTextContainer}>
            <Text style={styles.serviceText}>
              <Highlight attribute="serviceEnglish" hit={item} />
            </Text>
            <Text style={styles.serviceText}>
              <Highlight attribute="serviceSpanish" hit={item} />
            </Text>
          </View>
          {item.serviceCategory && (
            <View style={styles.categoryTextContainer}>
              <Text style={styles.categoryText}>
                {serviceCategory.serviceCategoryEnglish}
              </Text>
              <Text style={styles.categoryText}>
                {serviceCategory.serviceCategorySpanish}
              </Text>
            </View>
          )}
        </View>
      );
    }
  };

  return (
    <SafeAreaView style={styles.safeAreaViewStyle}>
      <Text style={styles.searchTitle}>I'm looking for...</Text>
      <InstantSearch
        style={styles.instantSearchStyle}
        indexName={process.env.ALGOLIA_INDEX_NAME}
        searchClient={algoliaClient}>
        <SearchBox />
        <InfiniteHits style={styles.infiniteHits} />
      </InstantSearch>
    </SafeAreaView>
  );
};

export default ServiMarket;

const styles = StyleSheet.create({
  safeAreaViewStyle: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
    paddingHorizontal: 10,
    backgroundColor: 'white',
  },
  searchTitle: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  serviceItemContainer: {
    //position: 'relative',
    //flexDirection: 'column',
    //alignItems: 'center',
    //marginRight: 10,
    //width:'100%',
    height: 200,
  },
  serviceImage: {
    width: '100%',
    height: '100%',
    borderRadius: 15,
  },
  serviceTextContainer: {
    position: 'absolute',
    top: 10,
    left: 10,
    width: '100%',
    height: '100%',
    justifyContent: 'flex-start',
    zIndex: 2,
  },
  categoryTextContainer: {
    position: 'absolute',
    bottom: 10,
    right: 10,
    width: '100%',
    height: '100%',
    justifyContent: 'flex-end',
    zIndex: 2,
  },
  overlay: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    backgroundColor: 'black',
    opacity: 0.5,
    borderRadius: 15,
    zIndex: 1,
  },
  serviceText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
  categoryText: {
    fontSize: 20,
    color: '#A8C5F3',
    textAlign: 'right',
  },
  separator: {
    borderBottomWidth: 10,
    borderColor: 'transparent',
  },
  instantSearchStyle: {
    backgroundColor: 'green',
  },
  infiniteHits: {
    backgroundColor: 'green',
    fontFamily: 'Times',
    fontSize: 24,
    //height: 500,
  },
});
Archivo /src/screens/PrivateZone/ViewHistory.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const ViewHistory = () => {
  return (
    <View>
      <Text>ViewHistory</Text>
    </View>
  );
};

export default ViewHistory;

const styles = StyleSheet.create({});
