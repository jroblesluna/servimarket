Archivo /src/screens/PrivateZone/PrivateZone.js:
import React, {useEffect, useState} from 'react';
import {useNavigation} from '@react-navigation/native';
import auth from '@react-native-firebase/auth';
import {GoogleSignin} from '@react-native-google-signin/google-signin';
import PrivateZoneDrawer from '../../components/PrivateZoneDrawer';
import ServiMarket from './ServiMarket';

function PrivateZone() {
  const navigation = useNavigation();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged(currentUser => {
      setUser(currentUser);
    });

    return unsubscribe;
  }, []);

  const handleSignOut = async () => {
    try {
      console.log(user);
      if (user != null) {
        console.log('Auth Signing Out');
        await auth().signOut();
      }
      const isGoogleSignedIn = await GoogleSignin.isSignedIn();
      console.log('isGoogleSignedIn:', isGoogleSignedIn);
      if (isGoogleSignedIn) {
        console.log('Google Signing Out');
        await GoogleSignin.revokeAccess();
        console.log('Access Revoked');
      }
    } catch (error) {
      console.log('Error en Sign Out: ', error);
    } finally {
      console.log('Nav Reset');
      navigation.reset({
        index: 0,
        routes: [{name: 'Login'}],
      });
    }
  };

  return (
    <PrivateZoneDrawer
      handleSignOut={handleSignOut}
      user={user}
      navigation={navigation}>
      <ServiMarket />
    </PrivateZoneDrawer>
  );
}

export default PrivateZone;
Archivo /src/screens/PrivateZone/MyAppointments.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyAppointments = () => {
  return (
    <View>
      <Text>MyAppointments</Text>
    </View>
  );
};

export default MyAppointments;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MyProfile.js:
import React, {useState, useEffect} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  Alert,
  Image,
} from 'react-native';
import firestore from '@react-native-firebase/firestore';
import auth from '@react-native-firebase/auth';
import CustomImage from '../../components/CustomImage';

function MyProfile() {
  const [currentUser, setCurrentUser] = useState(null);
  const [displayName, setDisplayName] = useState('');
  const [givenName, setGivenName] = useState('');
  const [familyName, setFamilyName] = useState('');
  const [photoURL, setPhotoURL] = useState('');

  useEffect(() => {
    const user = auth().currentUser;
    if (user) {
      const userRef = firestore().collection('users').doc(user.email);

      userRef.get().then(doc => {
        if (doc.exists) {
          const userData = doc.data();
          setCurrentUser(userData);
          setDisplayName(userData.displayName);
          setGivenName(userData.givenName);
          setFamilyName(userData.familyName);
          setPhotoURL(userData.photoURL);
        }
      });
    }
  }, []);

  const handleSaveChanges = async () => {
    const user = auth().currentUser;
    if (user) {
      const userRef = firestore().collection('users').doc(user.email);
      try {
        await userRef.update({
          displayName,
          givenName,
          familyName,
          photoURL,
        });
        Alert.alert('Ã‰xito', 'Cambios guardados exitosamente');
      } catch (error) {
        Alert.alert('Error', 'No se pudieron guardar los cambios');
      }
    }
  };
  console.log(photoURL);

  return (
    <View style={styles.container}>
      <Text style={styles.titleText}>Mi Perfil</Text>

      {currentUser && (
        <>
          {photoURL ? (
            <Image source={{uri: photoURL}} style={styles.headerImage} />
          ) : (
            <CustomImage
              imageName="logo"
              width={100}
              height={100}
              borderRadius={50}
            />
          )}

          <TextInput
            style={styles.input}
            placeholder="Nombre Completo"
            value={displayName}
            onChangeText={text => setDisplayName(text)}
          />

          <TextInput
            style={styles.input}
            placeholder="Nombre"
            value={givenName}
            onChangeText={text => setGivenName(text)}
          />

          <TextInput
            style={styles.input}
            placeholder="Apellido"
            value={familyName}
            onChangeText={text => setFamilyName(text)}
          />

          <TextInput
            style={styles.input}
            placeholder="URL de la Foto de Perfil"
            value={photoURL}
            onChangeText={text => setPhotoURL(text)}
          />

          <TouchableOpacity
            style={styles.saveButton}
            onPress={handleSaveChanges}>
            <Text style={styles.saveButtonText}>Guardar Cambios</Text>
          </TouchableOpacity>
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  headerImage: {
    width: 100,
    height: 100,
    resizeMode: 'contain',
    borderRadius: 75,
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  titleText: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#1E3264',
  },
  input: {
    width: 290,
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginVertical: 5,
    paddingHorizontal: 10,
    fontSize: 16,
  },
  saveButton: {
    width: 150,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
    marginTop: 10,
    backgroundColor: '#1363DF',
  },
  saveButtonText: {
    fontSize: 15,
    fontWeight: 'bold',
    color: 'white',
  },
});

export default MyProfile;
Archivo /src/screens/PrivateZone/MyServices.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyServices = () => {
  return (
    <View>
      <Text>MyServices</Text>
    </View>
  );
};

export default MyServices;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MySettings.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MySettings = () => {
  return (
    <View>
      <Text>MySettings</Text>
    </View>
  );
};

export default MySettings;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/MyWallet.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const MyWallet = () => {
  return (
    <View>
      <Text>MyWallet</Text>
    </View>
  );
};

export default MyWallet;

const styles = StyleSheet.create({});
Archivo /src/screens/PrivateZone/ServiMarket.js:
import {
  FlatList,
  Image,
  SafeAreaView,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import React, {useEffect, useState} from 'react';
import firestore from '@react-native-firebase/firestore';
import algoliasearch from 'algoliasearch/lite';
import {InstantSearch} from 'react-instantsearch-native';
import SearchBox from '../../components/SearchBox';
import PropTypes from 'prop-types';
import {connectInfiniteHits} from 'react-instantsearch-native';
import {connectHighlight} from 'react-instantsearch-native';

const ServiMarket = () => {
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesSnapshot = await firestore()
          .collection('serviceCategories')
          .get();
        const categoriesData = categoriesSnapshot.docs.map(doc => doc.data());
        setCategories(categoriesData);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  const ALGOLIA_APP_ID = 'VSO7VMX0UE';
  const ALGOLIA_API_KEY = '262fe5ea97e94bf5e4a9460e2846fba1';
  const ALGOLIA_INDEX_NAME = 'serviceSearchIndex';

  const algoliaClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_API_KEY);

  const preInfiniteHits = ({hits, hasMore, refineNext}) => {
    console.log(hits);
    return (
      <FlatList
        data={hits}
        keyExtractor={item => item.objectID}
        ItemSeparatorComponent={() => <View style={styles.separator} />}
        onEndReached={() => hasMore && refineNext()}
        renderItem={renderServiceItem}
        //numColumns={2}
      />
    );
  };

  preInfiniteHits.propTypes = {
    hits: PropTypes.arrayOf(PropTypes.object).isRequired,
    hasMore: PropTypes.bool.isRequired,
    refineNext: PropTypes.func.isRequired,
  };

  const InfiniteHits = connectInfiniteHits(preInfiniteHits);

  const preHighlight = ({attribute, hit, highlight}) => {
    const highlights = highlight({
      highlightProperty: '_highlightResult',
      attribute,
      hit,
    });

    return (
      <Text>
        {highlights.map(({value, isHighlighted}, index) => {
          const style = {
            color: isHighlighted ? 'black' : 'white',
            backgroundColor: isHighlighted ? 'yellow' : 'transparent',
          };
          return (
            <Text key={index} style={style}>
              {value}
            </Text>
          );
        })}
      </Text>
    );
  };

  preHighlight.propTypes = {
    attribute: PropTypes.string.isRequired,
    hit: PropTypes.object.isRequired,
    highlight: PropTypes.func.isRequired,
  };

  const Highlight = connectHighlight(preHighlight);

  const renderServiceItem = ({item}) => {
    const parsedServiceCategoryId = parseInt(
      item.serviceCategory.split('/')[1],
      10,
    );
    const serviceCategory = categories.find(
      category => category.serviceCategoryId === parsedServiceCategoryId,
    );

    if (!serviceCategory) {
      return (
        <View style={styles.serviceItemContainer}>
          <Image source={{uri: item.imageUrl}} style={styles.serviceImage} />
          <View style={styles.overlay} />
          <View style={styles.serviceTextContainer}>
            <Text style={styles.serviceText}>Service Name...</Text>
            <Text style={styles.serviceText}>Nombre de Servicio...</Text>
          </View>
          {item.serviceCategory && (
            <View style={styles.categoryTextContainer}>
              <Text style={styles.categoryText}>Category...</Text>
              <Text style={styles.categoryText}>CategorÃ­a</Text>
            </View>
          )}
        </View>
      );
    } else {
      return (
        <View style={styles.serviceItemContainer}>
          <Image source={{uri: item.imageUrl}} style={styles.serviceImage} />
          <View style={styles.overlay} />
          <View style={styles.serviceTextContainer}>
            <Text style={styles.serviceText}>
              <Highlight attribute="serviceEnglish" hit={item} />
            </Text>
            <Text style={styles.serviceText}>
              <Highlight attribute="serviceSpanish" hit={item} />
            </Text>
          </View>
          {item.serviceCategory && (
            <View style={styles.categoryTextContainer}>
              <Text style={styles.categoryText}>
                {serviceCategory.serviceCategoryEnglish}
              </Text>
              <Text style={styles.categoryText}>
                {serviceCategory.serviceCategorySpanish}
              </Text>
            </View>
          )}
        </View>
      );
    }
  };

  return (
    <SafeAreaView style={styles.safeAreaViewStyle}>
      <Text style={styles.searchTitle}>I'm looking for...</Text>
      <InstantSearch
        style={styles.instantSearchStyle}
        indexName={ALGOLIA_INDEX_NAME}
        searchClient={algoliaClient}>
        <SearchBox />
        <InfiniteHits style={styles.infiniteHits} />
      </InstantSearch>
    </SafeAreaView>
  );
};

export default ServiMarket;

const styles = StyleSheet.create({
  safeAreaViewStyle: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
    paddingHorizontal: 10,
    backgroundColor: 'white',
  },
  searchTitle: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  serviceItemContainer: {
    //position: 'relative',
    //flexDirection: 'column',
    //alignItems: 'center',
    //marginRight: 10,
    //width:'100%',
    height: 200,
  },
  serviceImage: {
    width: '100%',
    height: '100%',
    borderRadius: 15,
  },
  serviceTextContainer: {
    position: 'absolute',
    top: 10,
    left: 10,
    width: '100%',
    height: '100%',
    justifyContent: 'flex-start',
    zIndex: 2,
  },
  categoryTextContainer: {
    position: 'absolute',
    bottom: 10,
    right: 10,
    width: '100%',
    height: '100%',
    justifyContent: 'flex-end',
    zIndex: 2,
  },
  overlay: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    backgroundColor: 'black',
    opacity: 0.5,
    borderRadius: 15,
    zIndex: 1,
  },
  serviceText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
  categoryText: {
    fontSize: 20,
    color: '#A8C5F3',
    textAlign: 'right',
  },
  separator: {
    borderBottomWidth: 10,
    borderColor: 'transparent',
  },
  instantSearchStyle: {
    backgroundColor: 'green',
  },
  infiniteHits: {
    backgroundColor: 'green',
    fontFamily: 'Times',
    fontSize: 24,
    //height: 500,
  },
});
Archivo /src/screens/PrivateZone/ViewHistory.js:
import {StyleSheet, Text, View} from 'react-native';
import React from 'react';

const ViewHistory = () => {
  return (
    <View>
      <Text>ViewHistory</Text>
    </View>
  );
};

export default ViewHistory;

const styles = StyleSheet.create({});
