Archivo /package.json:
{
  "name": "servimarket",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "lint": "eslint .",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "@react-native-community/masked-view": "^0.1.11",
    "@react-native-firebase/app": "^18.3.0",
    "@react-native-firebase/auth": "^18.3.0",
    "@react-native-firebase/firestore": "^18.3.0",
    "@react-native-firebase/storage": "^18.3.0",
    "@react-native-google-signin/google-signin": "^10.0.1",
    "@react-native-picker/picker": "^2.4.10",
    "@react-navigation/drawer": "^6.6.3",
    "@react-navigation/native": "^6.1.7",
    "@react-navigation/stack": "^6.3.17",
    "@types/react-native": "^0.72.2",
    "algoliasearch": "^4.19.1",
    "i18next": "^23.4.2",
    "intl-pluralrules": "^2.0.1",
    "prop-types": "^15.8.1",
    "react": "18.2.0",
    "react-i18next": "^13.0.3",
    "react-instantsearch-hooks": "^6.47.3",
    "react-instantsearch-native": "^6.40.4",
    "react-native": "0.72.3",
    "react-native-dotenv": "^3.4.9",
    "react-native-gesture-handler": "^2.12.0",
    "react-native-phone-number-input": "^2.1.0",
    "react-native-reanimated": "^3.3.0",
    "react-native-safe-area-context": "^4.6.4",
    "react-native-screens": "^3.22.1",
    "react-native-vector-icons": "^9.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.20.0",
    "@babel/runtime": "^7.20.0",
    "@react-native/eslint-config": "^0.72.2",
    "@react-native/metro-config": "^0.72.7",
    "@tsconfig/react-native": "^3.0.0",
    "@types/metro-config": "^0.76.3",
    "@types/react": "^18.2.14",
    "@types/react-test-renderer": "^18.0.0",
    "babel-jest": "^29.2.1",
    "eslint": "^8.19.0",
    "jest": "^29.2.1",
    "metro-react-native-babel-preset": "0.76.5",
    "prettier": "^2.4.1",
    "react-test-renderer": "18.2.0",
    "typescript": "4.8.4"
  },
  "engines": {
    "node": ">=16"
  }
}
Archivo /index.js:
/**
 * @format
 */

import {AppRegistry} from 'react-native';
import App from './src/App';
import {name as appName} from './app.json';

// Importar las fuentes de iconos para iOS y Android
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import FontAwesome from 'react-native-vector-icons/FontAwesome';

// Registrar las fuentes de iconos
MaterialIcons.loadFont();
FontAwesome.loadFont();

AppRegistry.registerComponent(appName, () => App);
Archivo /src/App.tsx:
import React from 'react';
import Navigation from './components/Navigation';
import {Animated} from 'react-native';
import {I18nextProvider} from 'react-i18next';
import i18n from './i18n'; // Import the i18n configuration

const av = new Animated.Value(0);
av.addListener(() => {
  return;
});

function App() {
  return (
    <I18nextProvider i18n={i18n}>
      <Navigation />
    </I18nextProvider>
  );
}

export default App;
Archivo /src/components/CustomImage.js:
import React from 'react';
import {Image, StyleSheet} from 'react-native';

// Importar las imágenes necesarias
import logoImage from '../assets/images/logo.png';

const imageMap = {
  logo: logoImage,
  // Agrega aquí más nombres de archivo y sus rutas de importación correspondientes
};

const CustomImage = ({
  fileName = 'logo',
  width = 150,
  height = 150,
  borderRadius = 25,
}) => {
  const styles = StyleSheet.create({
    imageStyle: {
      width: width,
      height: height,
      borderRadius: borderRadius,
    },
  });

  const imageSource = imageMap[fileName];

  return <Image source={imageSource} style={styles.imageStyle} />;
};

export default CustomImage;
Archivo /src/components/InsetShadow.js:
import React from 'react';
import {StyleSheet, View} from 'react-native';
import PropTypes from 'prop-types';

const getShadowOffset = (type, offset) => {
  switch (type) {
    case ['top', 'bottom'].includes(type):
      return {
        width: 0,
        height: offset,
      };
    case ['left', 'right'].includes(type):
      return {
        width: offset,
        height: 0,
      };
    default:
      return {
        width: 0,
        height: 0,
      };
  }
};

const Shadow = ({
  type,
  shadowColor,
  shadowOpacity,
  shadowOffset,
  shadowRadius,
  elevation,
}) => {
  const shadowStyle = {
    shadowColor: shadowColor,
    shadowOffset: getShadowOffset(type, shadowOffset),
    shadowRadius: shadowRadius,
    shadowOpacity: shadowOpacity,
    elevation: elevation,
  };
  return <View style={[styles.shadow, styles[type], shadowStyle]} />;
};

const shadowTypes = ['left', 'top', 'right', 'bottom'];

const Shadows = props => {
  return shadowTypes.map((shadow, i) => {
    if (!props[shadow]) {
      return null;
    }
    const {shadowColor, shadowOpacity, shadowOffset, shadowRadius, elevation} =
      props;
    const shadowProps = {
      shadowColor,
      shadowOpacity,
      shadowOffset,
      shadowRadius,
      elevation,
    };
    return <Shadow key={`shadow-${i}`} type={shadow} {...shadowProps} />;
  });
};

// default to show all edges
Shadows.defaultProps = {
  left: true,
  top: true,
  right: true,
  bottom: true,
};

const InsetShadow = ({
  children,
  containerStyle,
  left,
  top,
  right,
  bottom,
  shadowColor,
  shadowRadius,
  shadowOffset,
  shadowOpacity,
  elevation,
}) => {
  const shadowProps = {
    left,
    top,
    right,
    bottom,
    shadowColor,
    shadowRadius,
    shadowOffset,
    shadowOpacity,
    elevation,
  };
  return (
    <View style={[styles.container, containerStyle]}>
      {children}
      <Shadows {...shadowProps} />
    </View>
  );
};

InsetShadow.propTypes = {
  children: PropTypes.node.isRequired,
  /* (default: {}) add style to the wrapper */
  containerStyle: PropTypes.object,
  /* (default: true) show the left shadow? */
  left: PropTypes.bool,
  /* (default: true) show the top shadow? */
  top: PropTypes.bool,
  /* (default: true) show the right shadow? */
  right: PropTypes.bool,
  /* (default: true) show the bottom shadow? */
  bottom: PropTypes.bool,
  /* (default: black) shadow color */
  shadowColor: PropTypes.string,
  /* (default: 3) shadow radius */
  shadowRadius: PropTypes.number,
  /* (default: 1) shadow offset - height for top, bottom, width for left, right */
  shadowOffset: PropTypes.number,
  /* (default 0.5) shadow opacity */
  shadowOpacity: PropTypes.number,
  /* (default: 5) shadow elevation for android */
  elevation: PropTypes.number,
};

InsetShadow.defaultProps = {
  containerStyle: {},
  left: true,
  top: true,
  right: true,
  bottom: true,
  shadowColor: 'black',
  shadowRadius: 3,
  shadowOffset: 5,
  shadowOpacity: 0.5,
  elevation: 5,
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
    height: '100%',
  },
  shadow: {
    position: 'absolute',
    backgroundColor: 'white',
    alignSelf: 'center',
  },
  left: {
    width: 10,
    height: '100%',
    left: -10,
  },
  top: {
    height: 10,
    width: '100%',
    top: -10,
  },
  right: {
    width: 10,
    height: '100%',
    right: -10,
  },
  bottom: {
    height: 10,
    width: '100%',
    bottom: -10,
  },
});

export default InsetShadow;
Archivo /src/components/Navigation.js:
import React from 'react';
import {createStackNavigator} from '@react-navigation/stack';
import {NavigationContainer} from '@react-navigation/native';
import Login from '../screens/PublicZone/Login';
import SignUp from '../screens/PublicZone/SignUp';
import PrivateZone from '../screens/PrivateZone/PrivateZone';

const Stack = createStackNavigator();

function Navigation() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Login"
          component={Login}
          options={{headerShown: false}}
        />
        <Stack.Screen
          name="SignUp"
          component={SignUp}
          options={{headerShown: false}}
        />
        <Stack.Screen
          name="PrivateZone"
          component={PrivateZone}
          options={{
            headerShown: false,
          }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default Navigation;
Archivo /src/components/SearchBox.js:
import React, {useEffect, useState} from 'react';
import {StyleSheet, View, TextInput} from 'react-native';
import PropTypes from 'prop-types';
import {connectSearchBox} from 'react-instantsearch-native';
import InsetShadow from './InsetShadow';

const getRandomPlaceholder = () => {
  const placeholders = [
    'Wedding Planner',
    'Fontanero',
    'Kids Teacher',
    'Profesor de piano',
    'Consultor educativo',
    'House painting',
    'Programador',
    'Architecht',
    'Coreographer',
    'Auxiliar contable',
    'Party planner',
    'Instructor de buceo',
  ];
  const randomIndex = Math.floor(Math.random() * placeholders.length);
  return placeholders[randomIndex];
};

const SearchBox = ({currentRefinement, refine}) => {
  const [placeholder, setPlaceholder] = useState(getRandomPlaceholder());

  useEffect(() => {
    if (!currentRefinement) {
      const interval = setInterval(() => {
        setPlaceholder(getRandomPlaceholder());
      }, 1000); // Cambiar cada 1 segundos (ajusta según tus preferencias)

      return () => clearInterval(interval);
    }
  }, [currentRefinement]);

  return (
    <View style={styles.container}>
      <InsetShadow
        containerStyle={styles.insetShadowStyle}
        elevation={15}
        left={true}
        top={true}
        right={false}
        bottom={false}>
        <TextInput
          style={styles.textInputStyle}
          onChangeText={value => refine(value)}
          value={currentRefinement}
          placeholder={placeholder}
          //autoFocus
        />
      </InsetShadow>
    </View>
  );
};

SearchBox.propTypes = {
  currentRefinement: PropTypes.string.isRequired,
  refine: PropTypes.func.isRequired,
};

const styles = StyleSheet.create({
  container: {
    paddingVertical: 10,
    height: 'auto',
  },
  textInputStyle: {
    height: 48,
    padding: 12,
    fontSize: 16,
    borderRadius: 5,
    borderColor: 'lightgray',
    borderWidth: 1,
  },
  insetShadowStyle: {borderRadius: 5, height: 'auto'},
});

export default connectSearchBox(SearchBox);
