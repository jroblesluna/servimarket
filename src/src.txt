Archivo /App.tsx:
import React from 'react';
import Navigation from './components/Navigation';
import {Animated} from 'react-native';

const av = new Animated.Value(0);
av.addListener(() => {
  return;
});

function App() {
  return <Navigation />;
}

export default App;
Archivo /PrivateZone.js:
import React, {useEffect, useState} from 'react';
import {useNavigation} from '@react-navigation/native';
import auth from '@react-native-firebase/auth';
import {GoogleSignin} from '@react-native-google-signin/google-signin';
import PrivateZoneDrawer from './components/PrivateZoneDrawer';
import ServiMarket from './screens/PrivateZone/ServiMarket';

function PrivateZone() {
  const navigation = useNavigation();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged(currentUser => {
      setUser(currentUser);
    });

    return unsubscribe;
  }, []);

  const handleSignOut = async () => {
    try {
      console.log(user);
      if (user != null) {
        console.log('Auth Signing Out');
        await auth().signOut();
      }
      const isGoogleSignedIn = await GoogleSignin.isSignedIn();
      console.log('isGoogleSignedIn:', isGoogleSignedIn);
      if (isGoogleSignedIn) {
        console.log('Google Signing Out');
        await GoogleSignin.revokeAccess();
        console.log('Access Revoked');
      }
    } catch (error) {
      console.log('Error en Sign Out: ', error);
    } finally {
      console.log('Nav Reset');
      navigation.reset({
        index: 0,
        routes: [{name: 'Login'}],
      });
    }
  };

  return (
    <PrivateZoneDrawer
      handleSignOut={handleSignOut}
      user={user}
      navigation={navigation}>
      <ServiMarket />
    </PrivateZoneDrawer>
  );
}

export default PrivateZone;
Archivo /components/CustomImage.js:
import React from 'react';
import {Image, StyleSheet} from 'react-native';

// Importar las imágenes necesarias
import logoImage from '../assets/images/logo.png';

const imageMap = {
  logo: logoImage,
  // Agrega aquí más nombres de archivo y sus rutas de importación correspondientes
};

const CustomImage = ({
  fileName = 'logo',
  width = 150,
  height = 150,
  borderRadius = 25,
}) => {
  const styles = StyleSheet.create({
    imageStyle: {
      width: width,
      height: height,
      borderRadius: borderRadius,
    },
  });

  const imageSource = imageMap[fileName];

  return <Image source={imageSource} style={styles.imageStyle} />;
};

export default CustomImage;
Archivo /components/Navigation.js:
import React from 'react';
import {createStackNavigator} from '@react-navigation/stack';
import {NavigationContainer} from '@react-navigation/native';
import Login from '../screens/PublicZone/Login';
import SignUp from '../screens/PublicZone/SignUp';
import PrivateZone from '../PrivateZone';

const Stack = createStackNavigator();

function Navigation() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Login"
          component={Login}
          options={{headerShown: false}}
        />
        <Stack.Screen
          name="SignUp"
          component={SignUp}
          options={{headerShown: false}}
        />
        <Stack.Screen
          name="PrivateZone"
          component={PrivateZone}
          options={{
            headerShown: false,
          }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default Navigation;
Archivo /components/PrivateZoneDrawer.js:
import React from 'react';
import {createDrawerNavigator} from '@react-navigation/drawer';
import {DrawerContentScrollView, DrawerItem} from '@react-navigation/drawer';
import {View, Image, StyleSheet, TouchableOpacity} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import ServiMarket from '../screens/PrivateZone/ServiMarket';
import SearchServices from '../screens/PrivateZone/SearchServices';
import ServiceInstantSearch from '../screens/PrivateZone/ServiceInstantSearch';
import MyProfile from '../screens/PrivateZone/MyProfile';
import MyServices from '../screens/PrivateZone/MyServices';
import MyAppointments from '../screens/PrivateZone/MyAppointments';
import ViewHistory from '../screens/PrivateZone/ViewHistory';
import MyWallet from '../screens/PrivateZone/MyWallet';
import MySettings from '../screens/PrivateZone/MySettings';
import {useNavigation} from '@react-navigation/native';

const CustomDrawerContent = ({handleSignOut, user, navigation}) => {
  return (
    <DrawerContentScrollView style={styles.drawerContentScrollViewStyle}>
      <View style={styles.headerContainer}>
        {user && user.photoURL && (
          <Image source={{uri: user.photoURL}} style={styles.headerImage} />
        )}
      </View>
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Profile"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyProfile')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="ServiMarket"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('ServiMarket')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="Search Services"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('SearchServices')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="Service Instant Search"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('ServiceInstantSearch')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Services"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyServices')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Appointments"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyAppointments')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="View History"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('ViewHistory')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Wallet"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MyWallet')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="My Settings"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={() => navigation.navigate('MySettings')}
      />
      <DrawerItem
        style={styles.drawerItemStyle}
        label="Sign Out"
        labelStyle={styles.drawerItemLabelStyle}
        onPress={handleSignOut}
      />
    </DrawerContentScrollView>
  );
};

const HeaderRight = () => {
  const navigation = useNavigation();

  const handleOpenDrawer = () => {
    navigation.openDrawer();
  };

  return (
    <TouchableOpacity onPress={handleOpenDrawer}>
      <Icon name="menu" size={24} color="black" style={{marginRight: 15}} />
    </TouchableOpacity>
  );
};

function PrivateZoneDrawer({handleSignOut, user, navigation}) {
  const Drawer = createDrawerNavigator();

  return (
    <Drawer.Navigator
      initialRouteName="ServiMarket" // Modificar esta línea
      screenOptions={{
        drawerType: 'front',
        drawerPosition: 'right',

        drawerStyle: {
          width: '66%',
          opacity: 0.85,
        },
        headerLeft: () => null, // Elimina el icono de hamburguesa del lado izquierdo
        headerRight: () => <HeaderRight navigation={navigation} />,
        headerTitleAlign: 'center', // Centra el título en la barra de navegación
      }}
      drawerContent={() => (
        <CustomDrawerContent
          handleSignOut={handleSignOut}
          user={user}
          navigation={navigation}
        />
      )}>
      <Drawer.Screen name="MyProfile" component={MyProfile} />
      <Drawer.Screen name="ServiMarket" component={ServiMarket} />
      <Drawer.Screen name="SearchServices" component={SearchServices} />
      <Drawer.Screen name="ServiceInstantSearch" component={ServiceInstantSearch} />
      <Drawer.Screen name="MyServices" component={MyServices} />
      <Drawer.Screen name="MyAppointments" component={MyAppointments} />
      <Drawer.Screen name="ViewHistory" component={ViewHistory} />
      <Drawer.Screen name="MyWallet" component={MyWallet} />
      <Drawer.Screen name="MySettings" component={MySettings} />
    </Drawer.Navigator>
  );
}

const styles = StyleSheet.create({
  drawerContentScrollViewStyle: {
    backgroundColor: '#1E3264',
  },
  headerContainer: {
    height: 150,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerImage: {
    width: 100,
    height: 100,
    resizeMode: 'contain',
    borderRadius: 75,
  },
  drawerItemStyle: {
    marginVertical: 1,
    marginLeft: 2,
    marginRight: 0,
  },
  drawerItemLabelStyle: {
    color: 'white',
    fontFamily: 'Comic Sans',
    fontSize: 20,
    fontWeight: 'bold',
  },
});

export default PrivateZoneDrawer;
Archivo /components/Highlight.js:
import React from 'react';
import { Text } from 'react-native';
import PropTypes from 'prop-types';
import { connectHighlight } from 'react-instantsearch-native';

const Highlight = ({ attribute, hit, highlight }) => {
  const highlights = highlight({
    highlightProperty: '_highlightResult',
    attribute,
    hit,
  });

  return (
    <Text>
      {highlights.map(({ value, isHighlighted }, index) => {
        const style = {
          backgroundColor: isHighlighted ? 'yellow' : 'transparent',
        };

        return (
          <Text key={index} style={style}>
            {value}
          </Text>
        );
      })}
    </Text>
  );
};

Highlight.propTypes = {
  attribute: PropTypes.string.isRequired,
  hit: PropTypes.object.isRequired,
  highlight: PropTypes.func.isRequired,
};

export default connectHighlight(Highlight);Archivo /components/InfiniteHits.js:
import React from 'react';
import {StyleSheet, Text, View, FlatList} from 'react-native';
import PropTypes from 'prop-types';
import {connectInfiniteHits} from 'react-instantsearch-native';
import Highlight from './Highlight';

const styles = StyleSheet.create({
  separator: {
    borderBottomWidth: 1,
    borderColor: '#ddd',
  },
  item: {
    padding: 10,
    flexDirection: 'column',
    backgroundColor: 'coral',
  },
  titleText: {
    fontWeight: 'bold',
  },
});

const InfiniteHits = ({hits, hasMore, refineNext}) => (
  <FlatList
    data={hits}
    keyExtractor={item => item.objectID}
    ItemSeparatorComponent={() => <View style={styles.separator} />}
    onEndReached={() => hasMore && refineNext()}
    renderItem={({item}) => (
      <View style={styles.item}>
        <Text style={styles.titleText}>
          {item.serviceEnglish}
          <Highlight attribute="name" hit={item} />
        </Text>
      </View>
    )}
  />
);

InfiniteHits.propTypes = {
  hits: PropTypes.arrayOf(PropTypes.object).isRequired,
  hasMore: PropTypes.bool.isRequired,
  refineNext: PropTypes.func.isRequired,
};

export default connectInfiniteHits(InfiniteHits);
Archivo /components/SearchBox.js:
import React from 'react';
import {StyleSheet, View, TextInput} from 'react-native';
import PropTypes from 'prop-types';
import {connectSearchBox} from 'react-instantsearch-native';

const styles = StyleSheet.create({
  container: {
    padding: 16,
    backgroundColor: 'coral',
  },
  input: {
    height: 48,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#fff',
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#ddd',
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
});

const SearchBox = ({currentRefinement, refine}) => (
  <View style={styles.container}>
    <TextInput
      style={styles.input}
      onChangeText={value => refine(value)}
      value={currentRefinement}
      placeholder="what are you looking for?"
    />
  </View>
);

SearchBox.propTypes = {
  currentRefinement: PropTypes.string.isRequired,
  refine: PropTypes.func.isRequired,
};

export default connectSearchBox(SearchBox);Archivo /screens/PrivateZone/ServiMarket.js:
import React, {useEffect, useState} from 'react';
import {View, StyleSheet, Text, Image, FlatList} from 'react-native';
import firestore from '@react-native-firebase/firestore';
import {ScrollView} from 'react-native-gesture-handler';

function ServiMarket() {
  const [services, setServices] = useState([]);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesSnapshot = await firestore()
          .collection('serviceCategories')
          .get();
        const categoriesData = categoriesSnapshot.docs.map(doc => doc.data());
        setCategories(categoriesData);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchServicesData = async () => {
      try {
        const servicesQuerySnapshot = await firestore()
          .collection('services')
          .limit(5)
          .get();
        const combinedServicesWithCategories = servicesQuerySnapshot.docs.map(
          async serviceDocument => {
            const serviceDocumentData = serviceDocument.data();
            if (serviceDocumentData.serviceCategory) {
              const serviceCategoryId = serviceDocumentData.serviceCategory.id;
              const parsedServiceCategoryId = parseInt(serviceCategoryId, 10); // Convertir a entero
              const serviceCategory = categories.find(
                category =>
                  category.serviceCategoryId === parsedServiceCategoryId,
              );
              return {
                ...serviceDocumentData,
                serviceCategory,
              };
            } else {
              return serviceDocumentData;
            }
          },
        );
        const servicesWithCategories = await Promise.all(
          combinedServicesWithCategories,
        );
        setServices(servicesWithCategories);
      } catch (error) {
        console.error('Error fetching services data:', error);
      }
    };

    fetchServicesData();
  }, [categories]);

  const renderServiceItem = ({item}) => (
    <View style={styles.serviceItemContainer}>
      <Image source={{uri: item.imageUrl}} style={styles.serviceImage} />
      <View style={styles.overlay} />
      <View style={styles.textContainer}>
        <Text style={styles.serviceText}>{item.serviceEnglish}</Text>
        {item.serviceCategory && (
          <Text style={styles.categoryText}>
            {item.serviceCategory.serviceCategoryEnglish}
          </Text>
        )}
      </View>
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.searchTitle}>Estoy buscando</Text>
      <View style={styles.servicesView}>
        <FlatList
          data={services}
          renderItem={renderServiceItem}
          keyExtractor={item => item.serviceId.toString()}
          showsHorizontalScrollIndicator={true}
          horizontal
        />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 10,
    backgroundColor: '#fff',
  },
  searchTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  servicesView: {
    //height: 150,
  },
  serviceItemContainer: {
    position: 'relative',
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 10,
    height: 150,
  },
  serviceImage: {
    width: 225,
    height: 150,
    borderRadius: 15,
  },
  textContainer: {
    position: 'absolute',
    width: 225,
    height: 150,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 10,
    zIndex: 2,
  },
  overlay: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    backgroundColor: 'black',
    opacity: 0.5,
    borderRadius: 15,
    zIndex: 1,
  },
  serviceText: {
    position: 'absolute',
    top: 10,
    left: 10,
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
  categoryText: {
    position: 'absolute',
    bottom: 10,
    right: 10,
    fontSize: 20,
    color: '#A8C5F3',
    textAlign: 'right',
  },
});

export default ServiMarket;
Archivo /screens/PrivateZone/SearchServices.js:
import React, {useState, useEffect, useRef} from 'react';
import {
  View,
  StyleSheet,
  Text,
  TextInput,
  FlatList,
  ActivityIndicator,
} from 'react-native';
import algoliasearch from 'algoliasearch/lite';

const SearchServices = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(false);
  const searchTimeout = useRef(null);

  // Configurar Algolia
  const ALGOLIA_APP_ID = 'VSO7VMX0UE';
  const ALGOLIA_API_KEY = '262fe5ea97e94bf5e4a9460e2846fba1';
  const ALGOLIA_INDEX_NAME = 'serviceSearchIndex'; // Nombre del índice de Algolia

  const algoliaClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_API_KEY);
  const algoliaIndex = algoliaClient.initIndex(ALGOLIA_INDEX_NAME);

  const fetchServices = async term => {
    try {
      setLoading(true);
      console.log(term);
      // Realizar búsqueda en Algolia
      const algoliaResponse = await algoliaIndex.search(term);
      // Obtener los datos de los resultados

      setServices(algoliaResponse.hits);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching services data:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    if (searchTerm.length >= 3) {
      // Debounce the search execution using a timeout
      if (searchTimeout.current) clearTimeout(searchTimeout.current);

      searchTimeout.current = setTimeout(() => {
        fetchServices(searchTerm);
      }, 1500);
    } else {
      // Clear the search results if the search term is less than 3 characters
      setServices([]);
    }
  }, [searchTerm]);

  const renderItem = ({item}) => (
    <Text style={styles.serviceItem}>
      {item.serviceEnglish} / {item.serviceSpanish}
    </Text>
  );

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchInput}
        placeholder="Buscar servicios..."
        value={searchTerm}
        onChangeText={text => setSearchTerm(text)}
      />
      {loading ? (
        <ActivityIndicator
          size="large"
          color="#0000ff"
          style={styles.loadingIndicator}
        />
      ) : (
        <FlatList
          data={services}
          renderItem={renderItem}
          keyExtractor={item => item.objectID.toString()}
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    backgroundColor: '#fff',
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 5,
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  serviceItem: {
    fontSize: 18,
    marginBottom: 5,
  },
  loadingIndicator: {
    marginTop: 20,
  },
});

export default SearchServices;
Archivo /screens/PrivateZone/ServiceInstantSearch.js:
import {StyleSheet, Text, SafeAreaView} from 'react-native';
import React from 'react';
import algoliasearch from 'algoliasearch/lite';
import {InstantSearch, Hits} from 'react-instantsearch-native';
import SearchBox from '../../components/SearchBox';
import InfiniteHits from '../../components/InfiniteHits';

const ServiceInstantSearch = () => {
  const ALGOLIA_APP_ID = 'VSO7VMX0UE';
  const ALGOLIA_API_KEY = '262fe5ea97e94bf5e4a9460e2846fba1';
  const ALGOLIA_INDEX_NAME = 'serviceSearchIndex'; // Nombre del índice de Algolia

  const algoliaClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_API_KEY);
  return (
    <SafeAreaView style={styles.safeAreaViewStyle}>
      <InstantSearch
        style={styles.instantSearchStyle}
        indexName={ALGOLIA_INDEX_NAME}
        searchClient={algoliaClient}>
        <SearchBox />
        <InfiniteHits style={styles.infiniteHits} />
      </InstantSearch>
    </SafeAreaView>
  );
};

export default ServiceInstantSearch;

const styles = StyleSheet.create({
  safeAreaViewStyle: {
    backgroundColor: 'gray',
    justifyContent: 'center',
  },
  instantSearchStyle: {
    backgroundColor: 'green',
  },
  infiniteHits: {
    backgroundColor: 'green',
    fontFamily: 'Times',
    fontSize: 24,
    height: 500,
  },
});
Archivo /screens/PublicZone/Login.js:
import React, {useEffect, useRef, useState} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  Alert,
  TouchableOpacity,
} from 'react-native';
import {useNavigation} from '@react-navigation/native';
import {
  GoogleSigninButton,
  GoogleSignin,
} from '@react-native-google-signin/google-signin';
import auth from '@react-native-firebase/auth';
import CustomImage from '../../components/CustomImage';
import {useRoute} from '@react-navigation/native';
import firestore from '@react-native-firebase/firestore';

GoogleSignin.configure({
  webClientId:
    '861186813540-hr41m36t7sh491dvc5ug8qrrtmajfp6g.apps.googleusercontent.com',
});

function Login() {
  const route = useRoute();
  const {notSigningUp} = route.params ?? {};

  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  const emailInputRef = useRef(null);
  const passwordInputRef = useRef(null);

  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged(currentUser => {
      console.log('Checking if currentUser');
      if (currentUser) {
        console.log('Checking if emailVerified');
        if (currentUser.emailVerified) {
          console.log('navigation.navigate(PrivateZone);');
          navigation.navigate('PrivateZone');
        } else {
          console.log('!isLoggingIn && notSigningUp?');
          if (!isLoggingIn && notSigningUp) {
            console.log('Yes -> auth().signOut();');
            auth().signOut();
          } else {
            console.log('Nope. Ignore');
          }
        }
      } else {
        console.log('No currentUser');
      }
    });

    return unsubscribe;
  }, [isLoggingIn, notSigningUp, navigation]);

  const handleGoogleSignIn = async () => {
    console.log('1. DESHABILITANDO...');
    setIsLoggingIn(true);
    try {
      console.log('2. Has Play Services');
      const playServices = await GoogleSignin.hasPlayServices({
        showPlayServicesUpdateDialog: true,
      });
      console.log(playServices);
      console.log('3. const {idToken} = await GoogleSignin.signIn();');
      const {idToken} = await GoogleSignin.signIn();
      console.log(
        '4. const googleCredential = auth.GoogleAuthProvider.credential(idToken);',
      );
      const googleCredential = auth.GoogleAuthProvider.credential(idToken);
      console.log('5. await auth().signInWithCredential(googleCredential);');
      const googleUser = await auth().signInWithCredential(googleCredential);

      console.log('6. Firestore', googleUser);

      const userRef = firestore()
        .collection('users')
        .doc(googleUser.user.email);
      console.log('userRef', userRef);
      const userDoc = await userRef.get();
      console.log('userDoc', userDoc);

      if (userDoc.exists) {
        console.log('El documento del usuario ya existe en Firestore');
      } else {
        console.log('Creando documento del usuario en Firestore');
        await firestore().collection('users').doc(googleUser.user.email).set({
          email: googleUser.user.email,
          displayName: googleUser.user.displayName,
          givenName: googleUser.additionalUserInfo.profile.given_name,
          familyName: googleUser.additionalUserInfo.profile.family_name,
          photoURL: googleUser.user.photoURL,
        });
      }

      console.log('7. navigation.navigate(PrivateZone);');
      navigation.navigate('PrivateZone');
    } catch (error) {
      console.log('8. Error', error.message);
    } finally {
      console.log('9. HABILITANDO...');
      setIsLoggingIn(false);
    }
  };

  const handleEmailSignIn = async () => {
    console.log('emailSignIn');

    if (email === '' || password === '') {
      Alert.alert('Error', 'Por favor, completa todos los campos');
      emailInputRef.current.focus();
      return;
    }

    try {
      console.log('Deshabilitando...');
      setIsLoggingIn(true);
      const {user} = await auth().signInWithEmailAndPassword(email, password);
      console.log('Logged In...');
      if (user && !user.emailVerified) {
        Alert.alert(
          'Email no verificado',
          'Por favor, verifica tu correo electrónico antes de iniciar sesión.',
        );
        setIsLoggingIn(false);
        return;
      }
      navigation.navigate('PrivateZone');
    } catch (error) {
      console.log(error.message);
      let errorMessage = '';
      switch (error.code) {
        case 'auth/invalid-email':
          errorMessage = 'Email inválido';
          setEmail('');
          emailInputRef.current.focus();
          break;
        case 'auth/user-not-found':
        case 'auth/wrong-password':
          errorMessage = 'Combinación de usuario y clave incorrecta';
          setPassword('');
          passwordInputRef.current.focus();
          break;
        default:
          errorMessage = error.message;
          break;
      }
      Alert.alert('Error', errorMessage);
    } finally {
      console.log('Habilitando...');
      setIsLoggingIn(false);
    }
  };

  const handleEmailSignUp = () => {
    try {
      console.log('Deshabilitando');
      setIsLoggingIn(false);
      navigation.navigate('SignUp');
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setEmail('');
      setPassword('');
      console.log('Habilitando');
      setIsLoggingIn(false);
    }
  };

  return (
    <View style={styles.container}>
      <CustomImage
        imageName="logo"
        width={100}
        height={100}
        borderRadius={15}
      />

      <Text style={styles.titleText}>ServiMarket.app</Text>

      <TextInput
        style={styles.input}
        placeholder="Correo electrónico"
        value={email}
        onChangeText={text => setEmail(text)}
        ref={emailInputRef}
      />

      <TextInput
        style={styles.input}
        placeholder="Contraseña"
        value={password}
        onChangeText={text => setPassword(text)}
        secureTextEntry
        ref={passwordInputRef}
      />
      <View style={styles.classicLoginView}>
        <TouchableOpacity
          style={[
            styles.classicButton,
            styles.signInClassicButton,
            isLoggingIn && styles.disabledButton,
          ]}
          onPress={() => handleEmailSignIn()}
          disabled={isLoggingIn}>
          <Text style={styles.classicButtonText}>Iniciar sesión</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.classicButton,
            styles.signUpClassicButton,
            isLoggingIn && styles.disabledButton,
          ]}
          onPress={() => handleEmailSignUp()}>
          <Text style={styles.classicButtonText}>Registrarme</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.hr} />
      <GoogleSigninButton
        style={[styles.loginGoogleButton, isLoggingIn && styles.disabledButton]}
        onPress={() => handleGoogleSignIn()}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  titleText: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#1E3264',
  },
  classicLoginView: {
    flexDirection: 'row',
  },
  classicButtonText: {
    fontSize: 15,
    fontWeight: 'bold',
    color: 'white',
  },
  classicButton: {
    width: 142,
    height: 42,
    margin: 5,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 2,
    shadowColor: '#000000',
    shadowRadius: 2,
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 1,
    elevation: 4,
  },
  signInClassicButton: {
    backgroundColor: '#202020',
  },
  signUpClassicButton: {
    backgroundColor: '#1363DF',
  },
  loginGoogleButton: {
    width: 300,
    height: 50,
    margin: 5,
  },
  disabledButton: {
    opacity: 0.5, // Cambiar la opacidad del botón deshabilitado
  },
  input: {
    width: 290,
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginVertical: 5,
    paddingHorizontal: 10,
  },
  hr: {
    width: 300,
    height: 2,
    borderLeftColor: '#505050',
    borderBottomColor: '#606060',
    borderTopColor: '#c0c0c0',
    borderRightColor: '#d0d0d0',
    borderWidth: 1,
    marginVertical: 10,
  },
});

export default Login;
Archivo /screens/PublicZone/SignUp.js:
import React, {useState, useEffect, useRef} from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import auth from '@react-native-firebase/auth';
import CustomImage from '../../components/CustomImage';

function SignUp({navigation}) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [repeatPassword, setRepeatPassword] = useState('');
  const [emailValid, setEmailValid] = useState(false);
  const [passwordMatch, setPasswordMatch] = useState(false);
  const [passwordLength, setPasswordLength] = useState(false);
  const [passwordUppercase, setPasswordUppercase] = useState(false);
  const [passwordLowercase, setPasswordLowercase] = useState(false);
  const [passwordDigit, setPasswordDigit] = useState(false);
  const [passwordSpecialChar, setPasswordSpecialChar] = useState(false);
  const [notSigningUp, setNotSigningUp] = useState(true);

  const emailInputRef = useRef(null);
  const passwordInputRef = useRef(null);

  useEffect(() => {
    const validateEmail = () => {
      const emailRegex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
      setEmailValid(emailRegex.test(email));
    };

    const validatePassword = () => {
      setPasswordMatch(password === repeatPassword);
      setPasswordLength(password.length >= 8);
      setPasswordUppercase(/[A-Z]/.test(password));
      setPasswordLowercase(/[a-z]/.test(password));
      setPasswordDigit(/[0-9]/.test(password));
      setPasswordSpecialChar(/[!@#$%^&*(),.?":{}|<>]/.test(password));
    };

    validateEmail();
    validatePassword();
  }, [email, password, repeatPassword]);

  const handleSignUp = async () => {
    try {
      setNotSigningUp(false);
      console.log('Creando');
      await auth().createUserWithEmailAndPassword(email, password);
      console.log('Obteniendo user nuevo');
      const newUser = auth().currentUser;
      console.log('Enviar mail de verificación');
      await newUser.sendEmailVerification();
      console.log('Aviso para verificar email');
      Alert.alert(
        'Verifica tu email',
        'Tu usuario ha sido creado; sin embargo, para poder iniciar sesión debes revisar tu correo y hacer click en el link enviado para verificar tu dirección de email.',
      );
      console.log('Yendo a Login');
      navigation.navigate('Login');
    } catch (error) {
      console.log('Error en el registro:', error);
      let errorMessage = '';
      switch (error.code) {
        case 'auth/invalid-email':
          setEmail('');
          emailInputRef.current.focus();
          errorMessage = 'Email inválido';
          break;
        case 'auth/email-already-in-use':
          setEmail('');
          emailInputRef.current.focus();
          errorMessage = 'Email ya registrado';
          break;
        case 'auth/weak-password':
          setPassword('');
          setRepeatPassword('');
          errorMessage = 'Contraseña muy corta';
          passwordInputRef.current.focus();
          break;
        default:
          errorMessage = error.message;
          break;
      }
      Alert.alert('Error', errorMessage);
    } finally {
      setNotSigningUp(true);
    }
  };

  const renderValidationIndicator = (valid, text) => {
    return valid ? (
      <Text style={[styles.validationIndicator, {color: 'darkgreen'}]}>
        ✓ {text}
      </Text>
    ) : (
      <Text style={[styles.validationIndicator, {color: 'red'}]}>✗ {text}</Text>
    );
  };

  return (
    <View style={styles.container}>
      <CustomImage imageName="logo" width={75} height={75} borderRadius={10} />
      <Text style={styles.titleText}>Registro</Text>
      <TextInput
        style={styles.input}
        placeholder="Correo electrónico"
        value={email}
        onChangeText={text => setEmail(text)}
        ref={emailInputRef}
      />
      {renderValidationIndicator(emailValid, 'Email debe ser válido')}

      <TextInput
        style={styles.input}
        placeholder="Contraseña"
        value={password}
        onChangeText={text => setPassword(text)}
        secureTextEntry
        ref={passwordInputRef}
      />
      {renderValidationIndicator(passwordLength, 'Mínimo 8 caracteres')}
      {renderValidationIndicator(passwordUppercase, 'Mínimo 1 mayúscula')}
      {renderValidationIndicator(passwordLowercase, 'Mínimo 1 minúscula')}
      {renderValidationIndicator(passwordDigit, 'Mínimo 1 dígito')}
      {renderValidationIndicator(
        passwordSpecialChar,
        'Mínimo 1 caracter especial',
      )}

      <TextInput
        style={styles.input}
        placeholder="Repetir Contraseña"
        value={repeatPassword}
        onChangeText={text => setRepeatPassword(text)}
        secureTextEntry
      />
      {renderValidationIndicator(passwordMatch, 'Contraseñas coinciden')}

      <TouchableOpacity
        style={[
          styles.registerButton,
          {
            backgroundColor:
              emailValid &&
              passwordMatch &&
              passwordLength &&
              passwordUppercase &&
              passwordLowercase &&
              passwordDigit &&
              passwordSpecialChar &&
              notSigningUp
                ? '#1363DF'
                : 'gray',
          },
        ]}
        onPress={handleSignUp}
        disabled={
          !(
            emailValid &&
            passwordMatch &&
            passwordLength &&
            passwordUppercase &&
            passwordLowercase &&
            passwordDigit &&
            passwordSpecialChar &&
            notSigningUp
          )
        }>
        <Text style={styles.registerButtonText}>Registrarme</Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.loginButton}
        onPress={() => navigation.goBack()}>
        <Text style={styles.loginButtonText}>Volver al Inicio de Sesión</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  titleText: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#1E3264',
  },
  input: {
    width: 290,
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginVertical: 5,
    paddingHorizontal: 10,
    fontSize: 16,
  },
  validationIndicator: {
    marginVertical: 2,
    fontWeight: 'bold',
  },
  registerButton: {
    width: 150,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
    marginTop: 10,
  },
  registerButtonText: {
    fontSize: 15,
    fontWeight: 'bold',
    color: 'white',
  },
  loginButton: {
    marginTop: 20,
  },
  loginButtonText: {
    color: '#1363DF',
  },
});

export default SignUp;
